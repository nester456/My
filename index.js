import {
  makeWASocket,
  useMultiFileAuthState,
  fetchLatestBaileysVersion,
  DisconnectReason
} from '@whiskeysockets/baileys'
import { Boom } from '@hapi/boom'
import fetch from 'node-fetch'
import dotenv from 'dotenv'
import qrcode from 'qrcode-terminal'

dotenv.config()

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const TELEGRAM_CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID
const WHATSAPP_GROUP_ID = process.env.WHATSAPP_GROUP_ID

const allowedMessages = [
  "‚ö†Alert: Level Yellow ‚ö† ‚ö†–¢—Ä–∏–≤–æ–≥–∞: –†—ñ–≤–µ–Ω—å –ñ–æ–≤—Ç–∏–∏ÃÜ¬†‚ö†",
  "üî∑Alert: Level Blue üî∑üî∑–¢—Ä–∏–≤–æ–≥–∞: –†—ñ–≤–µ–Ω—å¬†–°–∏–Ω—ñ–∏ÃÜ¬†üî∑",
  "üö®Alert: Level Red - Proceed to shelter! üö®üö®–¢—Ä–∏–≤–æ–≥–∞: –†—ñ–≤–µ–Ω—å –ß–µ—Ä–≤–æ–Ω–∏–∏ÃÜ, –ü—Ä–æ–∏ÃÜ–¥—ñ—Ç—å¬†–≤¬†—É–∫—Ä–∏—Ç—Ç—è!¬†üö®",
  "‚úÖAlert: Level Green ‚úÖ ‚úÖ–í—ñ–¥–±—ñ–∏ÃÜ: –†—ñ–≤–µ–Ω—å –ó–µ–ª–µ–Ω–∏–∏ÃÜ¬†‚úÖ"
]

async function startBot() {
  const { state, saveCreds } = await useMultiFileAuthState('auth_info')
  const { version } = await fetchLatestBaileysVersion()

  const sock = makeWASocket({
    version,
    auth: state,
    printQRInTerminal: false
  })

  sock.ev.on('connection.update', (update) => {
    const { connection, lastDisconnect, qr } = update

    if (qr) {
      console.log('üì≤ –°–∫–∞–Ω—É–π QR-–∫–æ–¥ —É WhatsApp:')
      qrcode.generate(qr, { small: true })
    }

    if (connection === 'close') {
      const shouldReconnect =
        (lastDisconnect?.error instanceof Boom) &&
        lastDisconnect.error.output?.statusCode !== DisconnectReason.loggedOut
      console.log('‚ùå –ó º—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ. –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', shouldReconnect)
      if (shouldReconnect) {
        startBot()
      }
    } else if (connection === 'open') {
      console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ WhatsApp!')
    }
  })

  sock.ev.on('messages.upsert', async ({ messages }) => {
    const msg = messages[0]
    if (!msg.message || msg.key.remoteJid !== WHATSAPP_GROUP_ID) return

    const text = msg.message.conversation || msg.message.extendedTextMessage?.text
    if (text && allowedMessages.includes(text.trim())) {
      console.log(`üì© –ü–µ—Ä–µ—Å–∏–ª–∞—é –≤ Telegram: ${text}`)
      await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHANNEL_ID,
          text
        })
      })
    } else {
      console.log(`‚õî –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${text?.slice(0, 100)}`)
    }
  })

  sock.ev.on('creds.update', saveCreds)
}

startBot()